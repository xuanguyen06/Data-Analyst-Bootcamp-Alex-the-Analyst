/*

Cleaning Data in SQL

*/

SELECT *
FROM HousingData

------------------------------------------------------------------------------------------------------------------------------------

-- Standarize Date Format
SELECT SaleDate, CONVERT(Date, SaleDate)
FROM HousingData

ALTER TABLE HousingData
ALTER COLUMN SaleDate Date

SELECT SaleDate
FROM HousingData


------------------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address
SELECT *
FROM HousingData
--WHERE PropertyAddress IS NULL
ORDER BY ParcelID

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM HousingData a
JOIN HousingData b
     ON a.ParcelID = b.ParcelID
     AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM HousingData a
JOIN HousingData b
     ON a.ParcelID = b.ParcelID
     AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress IS NULL


------------------------------------------------------------------------------------------------------------------------------------

-- Breaking address into individual columns (address, city, state)
-- Property address
SELECT PropertyAddress
FROM HousingData

SELECT SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1) AS Address,
       SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress)) AS City
FROM HousingData

ALTER TABLE HousingData
Add PropAdd nvarchar(255),
    PropCity nvarchar(255);

UPDATE HousingData
SET PropAdd = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1),
    PropCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1, LEN(PropertyAddress))

SELECT *
FROM HousingData


-- Owner Address
SELECT OwnerAddress
FROM HousingData

SELECT PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3),
       PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2),
       PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
FROM HousingData

ALTER TABLE HousingData
Add OwnAdd nvarchar(255),
    OwnCity nvarchar(255),
    OwnState nvarchar(255);

UPDATE HousingData
SET OwnAdd = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3),
    OwnCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2),
    OwnState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)

SELECT *
FROM HousingData


-----------------------------------------------------------------------------------------------------------------------------

-- Change Y and N to Yes and No in "Sold as Vacant" field
SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM HousingData
GROUP BY SoldAsVacant
ORDER BY 2

SELECT SoldAsVacant,
       CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
	    WHEN SoldAsVacant = 'N' THEN 'No'
	    ELSE SoldAsVacant
	    END
FROM HousingData

UPDATE HousingData
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
			WHEN SoldAsVacant = 'N' THEN 'No'
			ELSE SoldAsVacant
			END


-------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates
-- Find duplicate rows
WITH RowNumCTE AS (
SELECT *,
       ROW_NUMBER() OVER ( PARTITION BY ParcelID, 
					PropertyAddress,
					SalePrice,
					SaleDate,
					LegalReference
			   ORDER BY UniqueID) row_num
FROM HousingData
)
SELECT *
FROM RowNumCTE
WHERE row_num > 1
ORDER BY PropertyAddress

-- Remove duplicates
WITH RowNumCTE AS (
SELECT *,
       ROW_NUMBER() OVER ( PARTITION BY ParcelID,
					PropertyAddress,
					SalePrice,
					SaleDate,
					LegalReference
			   ORDER BY UniqueID) row_num
FROM HousingData
)
DELETE
FROM RowNumCTE
WHERE row_num > 1


----------------------------------------------------------------------------------------------------------------------

-- Delete Unused Columns
SELECT *
FROM HousingData

ALTER TABLE HousingData
DROP COLUMN PropertyAddress, OwnerAddress, TaxDistrict
